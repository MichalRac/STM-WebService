package com.example.stm_client;

import android.os.Handler;
import android.util.Log;

import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import Marshals.MarshalDouble;

public class TestRequest {
    private static final String NAMESPACE = "https://192.168.0.32:8080/STM-MapProvider/"; // com.service.ServiceImpl
    private static final String METHOD_NAME = "getEncodedMap";
    private static final String SOAP_ACTION = NAMESPACE + METHOD_NAME;
    private static final String URL = "https://192.168.0.32:8080/STM-MapProvider/MapProviderService?wsdl";

    private String webResponse = "";
    private Handler handler = new Handler();
    private Thread thread;
    IMapProviderListener listener;

    String tempImg = "";

    public void startWebAccess(IMapProviderListener listener, Double long0, Double lat0, Double long1, Double lat1 ) {
        thread = new Thread() {
            public void run() {
                try {
                    Log.d("Req value0R", "Starting...");// log.d is used for
                    // debug
                    SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME);

                    PropertyInfo propInfoArg0 = new PropertyInfo();
                    propInfoArg0.setName("lat0");
                    propInfoArg0.setType(Double.class);
                    propInfoArg0.setValue(lat0);
                    request.addProperty(propInfoArg0);

                    PropertyInfo propInfoArg1 = new PropertyInfo();
                    propInfoArg1.setName("long0");
                    propInfoArg1.setType(Double.class);
                    propInfoArg1.setValue(long0);
                    request.addProperty(propInfoArg1);

                    PropertyInfo propInfoArg2 = new PropertyInfo();
                    propInfoArg2.setName("lat1");
                    propInfoArg2.setType(Double.class);
                    propInfoArg2.setValue(lat1);
                    request.addProperty(propInfoArg2);

                    PropertyInfo propInfoArg3 = new PropertyInfo();
                    propInfoArg3.setName("long1");
                    propInfoArg3.setType(Double.class);
                    propInfoArg3.setValue(long1);
                    request.addProperty(propInfoArg3);

                    SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
                    //envelope.dotNet = true;
                    envelope.setOutputSoapObject(request);

                    envelope.dotNet = true;
                    envelope.implicitTypes = true;
                    envelope.encodingStyle = SoapSerializationEnvelope.XSD;
                    MarshalDouble md = new MarshalDouble();
                    md.register(envelope);

                    // TO BE REMOVED
                    listener.OnMapProvided(tempImg);

                    HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);
                    //androidHttpTransport.debug = true;
                    androidHttpTransport.call(SOAP_ACTION, envelope);

                    // TO BE REPLACED WITH RESULT
                    listener.OnMapProvided(tempImg);

                    SoapObject objectResult = (SoapObject) envelope.bodyIn;
                    webResponse = objectResult.toString();
                    System.out.println("response: " + webResponse);

                } catch (SoapFault sp) {
                    // TO BE REMOVED
                    listener.OnMapProvided(tempImg);

                    sp.getMessage();
                    System.out.println("error = " + sp.getMessage());

                } catch (Exception e) {
                    // TO BE REMOVED
                    listener.OnMapProvided(tempImg);

                    System.out.println("problem8");
                    e.printStackTrace();

                    webResponse = "Connection/Internet problem";
                }

            }
        };

        thread.start();
    }
}
